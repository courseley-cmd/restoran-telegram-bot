import os
import json
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from google_api import append_to_sheet

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö JSON-–∑–∞—è–≤–æ–∫
async def handle_webhook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.message.text
    try:
        parsed = json.loads(data)
        name = parsed.get("name")
        email = parsed.get("email")
        guests = parsed.get("guests")

        context.user_data["current"] = {"name": name, "email": email, "guests": guests}
        keyboard = [[
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decline")
        ]]
        await update.message.reply_text(
            f"üçΩ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ò–º—è: {name}\nEmail: {email}\n–ì–æ—Å—Ç–µ–π: {guests}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: " + str(e))

# –ö–Ω–æ–ø–∫–∏ –ü—Ä–∏–Ω—è—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == "accept":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞:")
        context.user_data["status"] = "accepted"

    elif action == "decline":
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        data = context.user_data.get("current", {})
        append_to_sheet(SPREADSHEET_ID, [
            data.get("name"), data.get("email"), data.get("guests"), "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", "-"
        ])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ–ª–∞ –ø–æ—Å–ª–µ "–ü—Ä–∏–Ω—è—Ç–æ"
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("status") == "accepted":
        table = update.message.text
        data = context.user_data.get("current", {})
        append_to_sheet(SPREADSHEET_ID, [
            data.get("name"), data.get("email"), data.get("guests"), "–ü—Ä–∏–Ω—è—Ç–æ", table
        ])
        await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°—Ç–æ–ª: {table}")
        context.user_data["status"] = None

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
    app.add_handler(MessageHandler(filters.ALL, handle_webhook))

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
