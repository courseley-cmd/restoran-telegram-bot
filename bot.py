import os
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, CallbackQueryHandler, ContextTypes
)
from google_api import append_to_sheet

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Environment variables
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
if not TELEGRAM_TOKEN or not SPREADSHEET_ID:
    raise ValueError("Missing TELEGRAM_TOKEN or SPREADSHEET_ID environment variables")

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")

async def handle_webhook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.message.text
    try:
        parsed = json.loads(data)
        if not all(k in parsed for k in ["name", "email", "guests"]):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (name, email, guests).")
            return
        name, email, guests = parsed.get("name"), parsed.get("email"), parsed.get("guests")
        context.user_data["current"] = {"name": name, "email": email, "guests": guests}
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decline")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"""üçΩ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ò–º—è: {name}\nEmail: {email}\n–ì–æ—Å—Ç–µ–π: {guests}""",
            reply_markup=reply_markup
        )
    except json.JSONDecodeError as e:
        logger.error(f"JSON parsing failed: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data
    data = context.user_data.get("current", {})

    if action == "accept":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞:")
        context.user_data["status"] = "accepted"
        context.user_data["timeout"] = 300  # 5-minute timeout

    elif action == "decline":
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await query.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ –∑–∞–ø–∏—Å–∞–Ω–∞.")
        append_to_sheet(SPREADSHEET_ID, [
            data.get("name"), data.get("email"), data.get("guests"), "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", "-"
        ])

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("status") == "accepted":
        table = update.message.text
        data = context.user_data.get("current", {})
        append_to_sheet(SPREADSHEET_ID, [
            data.get("name"), data.get("email"), data.get("guests"), "–ü—Ä–∏–Ω—è—Ç–æ", table
        ])
        await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°—Ç–æ–ª: {table}")
        context.user_data.clear()  # Reset user data
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –∑–∞—è–≤–∫—É —Å–Ω–∞—á–∞–ª–∞.")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
    app.add_handler(MessageHandler(filters.Regex(r'^{.*}$'), handle_webhook))
    app.add_error_handler(lambda update, context: logger.error(f"Error: {context.error}"))

    app.run_polling()

if __name__ == "__main__":
    main()
